// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// computeAlgebraicFunctions
NumericVector computeAlgebraicFunctions(const arma::mat& D, const int& homDim);
RcppExport SEXP _TDAvec_computeAlgebraicFunctions(SEXP DSEXP, SEXP homDimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type homDim(homDimSEXP);
    rcpp_result_gen = Rcpp::wrap(computeAlgebraicFunctions(D, homDim));
    return rcpp_result_gen;
END_RCPP
}
// computeBettiCurve
NumericVector computeBettiCurve(const arma::mat& D, const int& homDim, const arma::vec& scaleSeq, const std::string& evaluate);
RcppExport SEXP _TDAvec_computeBettiCurve(SEXP DSEXP, SEXP homDimSEXP, SEXP scaleSeqSEXP, SEXP evaluateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type homDim(homDimSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scaleSeq(scaleSeqSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type evaluate(evaluateSEXP);
    rcpp_result_gen = Rcpp::wrap(computeBettiCurve(D, homDim, scaleSeq, evaluate));
    return rcpp_result_gen;
END_RCPP
}
// computeComplexPolynomial
arma::mat computeComplexPolynomial(const arma::mat& D, const int& homDim, const int& m, std::string polyType);
RcppExport SEXP _TDAvec_computeComplexPolynomial(SEXP DSEXP, SEXP homDimSEXP, SEXP mSEXP, SEXP polyTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type homDim(homDimSEXP);
    Rcpp::traits::input_parameter< const int& >::type m(mSEXP);
    Rcpp::traits::input_parameter< std::string >::type polyType(polyTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(computeComplexPolynomial(D, homDim, m, polyType));
    return rcpp_result_gen;
END_RCPP
}
// computeEulerCharacteristic
NumericVector computeEulerCharacteristic(const arma::mat& D, const arma::vec& scaleSeq, const int& maxhomDim, const std::string& evaluate);
RcppExport SEXP _TDAvec_computeEulerCharacteristic(SEXP DSEXP, SEXP scaleSeqSEXP, SEXP maxhomDimSEXP, SEXP evaluateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scaleSeq(scaleSeqSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxhomDim(maxhomDimSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type evaluate(evaluateSEXP);
    rcpp_result_gen = Rcpp::wrap(computeEulerCharacteristic(D, scaleSeq, maxhomDim, evaluate));
    return rcpp_result_gen;
END_RCPP
}
// computeLimits
NumericVector computeLimits(const arma::field<arma::mat>& Dlist, const int& homDim);
RcppExport SEXP _TDAvec_computeLimits(SEXP DlistSEXP, SEXP homDimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type Dlist(DlistSEXP);
    Rcpp::traits::input_parameter< const int& >::type homDim(homDimSEXP);
    rcpp_result_gen = Rcpp::wrap(computeLimits(Dlist, homDim));
    return rcpp_result_gen;
END_RCPP
}
// computeNormalizedLife
NumericVector computeNormalizedLife(const arma::mat& D, const int& homDim, const arma::vec& scaleSeq, std::string evaluate);
RcppExport SEXP _TDAvec_computeNormalizedLife(SEXP DSEXP, SEXP homDimSEXP, SEXP scaleSeqSEXP, SEXP evaluateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type homDim(homDimSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scaleSeq(scaleSeqSEXP);
    Rcpp::traits::input_parameter< std::string >::type evaluate(evaluateSEXP);
    rcpp_result_gen = Rcpp::wrap(computeNormalizedLife(D, homDim, scaleSeq, evaluate));
    return rcpp_result_gen;
END_RCPP
}
// computePersistenceBlock
NumericVector computePersistenceBlock(const arma::mat& D, const int& homDim, const arma::vec& xSeq, const arma::vec& ySeq, const double& tau);
RcppExport SEXP _TDAvec_computePersistenceBlock(SEXP DSEXP, SEXP homDimSEXP, SEXP xSeqSEXP, SEXP ySeqSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type homDim(homDimSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xSeq(xSeqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ySeq(ySeqSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(computePersistenceBlock(D, homDim, xSeq, ySeq, tau));
    return rcpp_result_gen;
END_RCPP
}
// computePersistenceImage
NumericVector computePersistenceImage(const arma::mat& D, const int& homDim, const arma::vec& xSeq, const arma::vec& ySeq, const double& sigma);
RcppExport SEXP _TDAvec_computePersistenceImage(SEXP DSEXP, SEXP homDimSEXP, SEXP xSeqSEXP, SEXP ySeqSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type homDim(homDimSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xSeq(xSeqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ySeq(ySeqSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(computePersistenceImage(D, homDim, xSeq, ySeq, sigma));
    return rcpp_result_gen;
END_RCPP
}
// computePersistenceLandscape
arma::mat computePersistenceLandscape(const arma::mat& D, const int& homDim, const arma::vec& scaleSeq, const int& k, const bool& generalized, const std::string& kernel, Nullable<double> h);
RcppExport SEXP _TDAvec_computePersistenceLandscape(SEXP DSEXP, SEXP homDimSEXP, SEXP scaleSeqSEXP, SEXP kSEXP, SEXP generalizedSEXP, SEXP kernelSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type homDim(homDimSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scaleSeq(scaleSeqSEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const bool& >::type generalized(generalizedSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(computePersistenceLandscape(D, homDim, scaleSeq, k, generalized, kernel, h));
    return rcpp_result_gen;
END_RCPP
}
// computePersistenceSilhouette
NumericVector computePersistenceSilhouette(const arma::mat& D, const int& homDim, const arma::vec& scaleSeq, const double& p, const std::string& evaluate);
RcppExport SEXP _TDAvec_computePersistenceSilhouette(SEXP DSEXP, SEXP homDimSEXP, SEXP scaleSeqSEXP, SEXP pSEXP, SEXP evaluateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type homDim(homDimSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scaleSeq(scaleSeqSEXP);
    Rcpp::traits::input_parameter< const double& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type evaluate(evaluateSEXP);
    rcpp_result_gen = Rcpp::wrap(computePersistenceSilhouette(D, homDim, scaleSeq, p, evaluate));
    return rcpp_result_gen;
END_RCPP
}
// computePersistentEntropy
NumericVector computePersistentEntropy(const arma::mat& D, const int& homDim, const arma::vec& scaleSeq, std::string evaluate);
RcppExport SEXP _TDAvec_computePersistentEntropy(SEXP DSEXP, SEXP homDimSEXP, SEXP scaleSeqSEXP, SEXP evaluateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type homDim(homDimSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type scaleSeq(scaleSeqSEXP);
    Rcpp::traits::input_parameter< std::string >::type evaluate(evaluateSEXP);
    rcpp_result_gen = Rcpp::wrap(computePersistentEntropy(D, homDim, scaleSeq, evaluate));
    return rcpp_result_gen;
END_RCPP
}
// computeStats
NumericVector computeStats(const arma::mat& D, const int& homDim);
RcppExport SEXP _TDAvec_computeStats(SEXP DSEXP, SEXP homDimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type homDim(homDimSEXP);
    rcpp_result_gen = Rcpp::wrap(computeStats(D, homDim));
    return rcpp_result_gen;
END_RCPP
}
// computeTemplateFunction
NumericVector computeTemplateFunction(const arma::mat& D, const int& homDim, const double& delta, const int& d, const double& epsilon);
RcppExport SEXP _TDAvec_computeTemplateFunction(SEXP DSEXP, SEXP homDimSEXP, SEXP deltaSEXP, SEXP dSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type homDim(homDimSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(computeTemplateFunction(D, homDim, delta, d, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// computeTropicalCoordinates
NumericVector computeTropicalCoordinates(const arma::mat& D, const int& homDim, const int& r);
RcppExport SEXP _TDAvec_computeTropicalCoordinates(SEXP DSEXP, SEXP homDimSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const int& >::type homDim(homDimSEXP);
    Rcpp::traits::input_parameter< const int& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(computeTropicalCoordinates(D, homDim, r));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TDAvec_computeAlgebraicFunctions", (DL_FUNC) &_TDAvec_computeAlgebraicFunctions, 2},
    {"_TDAvec_computeBettiCurve", (DL_FUNC) &_TDAvec_computeBettiCurve, 4},
    {"_TDAvec_computeComplexPolynomial", (DL_FUNC) &_TDAvec_computeComplexPolynomial, 4},
    {"_TDAvec_computeEulerCharacteristic", (DL_FUNC) &_TDAvec_computeEulerCharacteristic, 4},
    {"_TDAvec_computeLimits", (DL_FUNC) &_TDAvec_computeLimits, 2},
    {"_TDAvec_computeNormalizedLife", (DL_FUNC) &_TDAvec_computeNormalizedLife, 4},
    {"_TDAvec_computePersistenceBlock", (DL_FUNC) &_TDAvec_computePersistenceBlock, 5},
    {"_TDAvec_computePersistenceImage", (DL_FUNC) &_TDAvec_computePersistenceImage, 5},
    {"_TDAvec_computePersistenceLandscape", (DL_FUNC) &_TDAvec_computePersistenceLandscape, 7},
    {"_TDAvec_computePersistenceSilhouette", (DL_FUNC) &_TDAvec_computePersistenceSilhouette, 5},
    {"_TDAvec_computePersistentEntropy", (DL_FUNC) &_TDAvec_computePersistentEntropy, 4},
    {"_TDAvec_computeStats", (DL_FUNC) &_TDAvec_computeStats, 2},
    {"_TDAvec_computeTemplateFunction", (DL_FUNC) &_TDAvec_computeTemplateFunction, 5},
    {"_TDAvec_computeTropicalCoordinates", (DL_FUNC) &_TDAvec_computeTropicalCoordinates, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_TDAvec(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
